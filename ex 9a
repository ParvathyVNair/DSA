#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define SIZE 100

// Stack data structure
struct Stack {
    int top;
    char items[SIZE];
};

// Stack operations
void push(struct Stack* stack, char value) {
    stack->items[++stack->top] = value;
}

char pop(struct Stack* stack) {
    return stack->items[stack->top--];
}

int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

int isOperator(char value) {
    if (value == '+' || value == '-' || value == '*' || value == '/') {
        return 1;
    }
    return 0;
}

int precedence(char value) {
    if (value == '+' || value == '-') {
        return 1;
    }
    if (value == '*' || value == '/') {
        return 2;
    }
    return 0;
}

void infixToPostfix(char* expression) {
    struct Stack stack;
    stack.top = -1;

    int i, j = 0;
    char value, peek;
    for (i = 0; expression[i] != '\0'; i++) {
        value = expression[i];

        if (value == '(') {
            push(&stack, value);
        } else if (isdigit(value)) {
            expression[j++] = value;
        } else if (value == ')') {
            while (!isEmpty(&stack) && stack.items[stack.top] != '(') {
                expression[j++] = pop(&stack);
            }
            if (!isEmpty(&stack)) {
                pop(&stack); // Remove '('
            }
        } else {
            while (!isEmpty(&stack) && isOperator(stack.items[stack.top]) &&
                   precedence(value) <= precedence(stack.items[stack.top])) {
                expression[j++] = pop(&stack);
            }
            push(&stack, value);
        }
    }

    while (!isEmpty(&stack)) {
        expression[j++] = pop(&stack);
    }

    expression[j] = '\0';
}

int main() {
    char expression[SIZE];
    printf("Enter the infix expression: ");
    scanf("%s", expression);

    infixToPostfix(expression);
    printf("The equivalent postfix expression is: %s\n", expression);

    return 0;
}
