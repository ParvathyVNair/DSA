#include<stdio.h>
#include<limits.h>

#define V 10

int minDistance(int dist[], int sptSet[]) {
   int min = INT_MAX, min_index;

   for (int v = 0; v < V; v++)
     if (sptSet[v] == 0 && dist[v] <= min)
         min = dist[v], min_index = v;

   return min_index;
}

int printSolution(int dist[]) {
   printf("Vertex \t\t Distance from Source\n");
   for (int i = 0; i < V; i++)
      printf("%d \t\t %d\n", i, dist[i]);
}

void dijkstra(int graph[V][V], int src) {
     int dist[V];     
     int sptSet[V]; 
     for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, sptSet[i] = 0;
     dist[src] = 0;
     for (int count = 0; count < V-1; count++) {
       int u = minDistance(dist, sptSet);
       sptSet[u] = 1;
       for (int v = 0; v < V; v++)
         if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && 
                                       dist[u]+graph[u][v] < dist[v])
            dist[v] = dist[u] + graph[u][v];
     }
     printSolution(dist);
}

int main() {
   int graph[V][V];
   int src, n;

   printf("Enter the number of vertices in the graph (maximum %d): ", V);
   scanf("%d", &n);

   printf("Enter the weighted adjacency matrix of the graph (enter 0 for no edge):\n");
   for(int i=0; i<n; i++) {
       for(int j=0; j<n; j++) {
           scanf("%d", &graph[i][j]);
       }
   }

   printf("Enter the source vertex: ");
   scanf("%d", &src);

   dijkstra(graph, src);

   return 0;
}
