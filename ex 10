#include <stdio.h>
#include <stdlib.h>

struct node {
    int item;
    struct node* left;
    struct node* right;
};

struct node* create(int value) {
    struct node* newNode = (struct node*) malloc(sizeof(struct node));
    newNode->item = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

void inorderTraversal(struct node* root) {
    if (root == NULL) {
        return;
    }
    inorderTraversal(root->left);
    printf("%d ", root->item);
    inorderTraversal(root->right);
}

void preorderTraversal(struct node* root) {
    if (root == NULL) {
        return;
    }
    printf("%d ", root->item);
    preorderTraversal(root->left);
    preorderTraversal(root->right);
}

void postorderTraversal(struct node* root) {
    if (root == NULL) {
        return;
    }
    postorderTraversal(root->left);
    postorderTraversal(root->right);
    printf("%d ", root->item);
}

struct node* insertLeft(struct node* root, int value) {
    struct node* newNode = create(value);
    root->left = newNode;
    return newNode;
}

struct node* insertRight(struct node* root, int value) {
    struct node* newNode = create(value);
    root->right = newNode;
    return newNode;
}

int main() {
    struct node* root = create(1);
    struct node* leftChild = insertLeft(root, 4);
    struct node* rightChild = insertRight(root, 6);
    insertLeft(leftChild, 42);
    insertRight(rightChild, 5);
    insertLeft(rightChild, 2);
    insertRight(rightChild, 33);

    printf("Traversal of inserted binary tree:\n");
    printf("Inorder Traversal: ");
    inorderTraversal(root);
    printf("\nPreorder Traversal: ");
    preorderTraversal(root);
    printf("\nPostorder Traversal: ");
    postorderTraversal(root);
    printf("\n");

    return 0;
}
